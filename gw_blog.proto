syntax = "proto3";

package blog_svc;

import "google/protobuf/any.proto";

option go_package = "./apis/serviceconn/gateway_blog/pb";

message DraftBlogRequest {
    string blog_id = 1;
    string owner_account_id = 2;
    Blog blog = 3;
    bool is_draft = 4;
    bool is_archive = 5;
    repeated string tags = 6;
    string content_type = 7;
    repeated string author_list = 8;
    string ip = 9;
    string client = 10;
    string action = 11;
}

message BlogResponse {
    string message = 1;
    Blog blog = 2;
    string error = 3;
}

message Blog {
    int64 time = 1;
    repeated Block blocks = 2;
}

message Block {
    string id = 1;
    string type = 2;
    Data data = 3;
    repeated string author = 4;
    int64 time = 5;
    Tunes tunes = 6;
}

message Data {
    string text = 1;
    int32 level = 2;  // For headers
    File file = 3;    // For files in attaches and images
    repeated string items = 4; // For lists and checklist items
    string list_type = 5; // For list type (unordered, ordered)
    bool withBorder = 6;  // For images
    bool withBackground = 7; // For images
    bool stretched = 8;  // For images
    string caption = 9;  // For images

    // For tables
    bool withHeadings = 10; // For tables
    repeated TableRow table_content = 11;

    // For code blocks
    string code = 12;
    string language = 13; // Optional: language of the code block

    // For URLs
    URLData link = 14;

    // For checklists
    repeated ChecklistItem checklist = 15;
}

message TableRow {
    repeated string cells = 1;  // List of cell contents in the row
}

message ChecklistItem {
    string text = 1;
    bool checked = 2;
}

message URLData {
    string url = 1;
    string title = 2;
    string description = 3;
    string image_url = 4;  // Optional: Image URL for link previews
}

message File {
    string url = 1;
    int32 size = 2;
    string name = 3;
    string extension = 4;
}

message Tunes {
    repeated string footnotes = 1;
}

message PublishBlogReq {
    string blog_id = 1;
    string account_id = 2;
    string ip = 3;
    string client = 4;
}

message PublishBlogResp {
    string message = 1;
    string error = 2;
}

message BlogByIdReq {
    string blog_id = 1;
    string owner_account_id = 2;
}

message BlogByIdRes {
    string blog_id = 1;
    string owner_account_id = 2;
    Blog blog = 3;
    bool is_draft = 4;
    bool is_archive = 5;
    repeated string tags = 6;
    string content_type = 7;
    repeated string author_list = 8;
}

message ArchiveBlogReq {
    string blog_id = 1;
}

message ArchiveBlogResp {
    string message = 1;
    string error = 2;
}

message GetBlogsByTagsNameReq {
    repeated string tag_names = 1;
}

message GetBlogsByTags {
    string blog_id = 1;
    string owner_account_id = 2;
    Blog blog = 3;
    repeated string tags = 4;
    string content_type = 5;
    repeated string author_list = 6;
}

message GetBlogsByTagsNameRes {
    repeated GetBlogsByTags the_blogs = 1;
    string error = 2;
}

message GetBlogs {
    string blog_id = 1;
    string owner_account_id = 2;
    Blog blog = 3;
    repeated string tags = 4;
    string content_type = 5;
    repeated string author_list = 6;
}

message GetDraftBlogsRes {
    repeated GetBlogs blogs = 1;
    string error = 2;
}

message GetPublishedBlogsRes {
    repeated GetBlogs blogs = 1;
    string error = 2;
}

message BlogExistsRes {
    bool blog_exists = 1;
    bool is_draft = 2;
    bool is_archive = 3;
    repeated string tags = 4;
    string last_publish_time = 5;
    string error = 6;
}

message DeleteBlogReq {
    string blog_id = 1;
    string owner_account_id = 2;
    string ip = 3;
    string client = 4;
}

message DeleteBlogResp {
    string message = 1;
    string error = 2;
}

message GetBlogsByBlogIds {
    repeated string blog_ids = 1;
}

message GetBlogsRes {
    repeated GetBlogs blogs = 1;
    string error = 2;
}

// --------------------------------------------------------------------- V2 APIs ---------------------------------------------------------------------

message FollowingAccounts {
    repeated string account_ids = 1;
    int32 limit = 2;
    int32 offset = 3;
    string sort_by = 4;
}

message GetBlogsReq {
    string account_id = 1;
    string username = 2;
    bool is_draft = 3;
    bool is_archive = 4;
    repeated string tags = 5;
    int32 limit = 6;
    int32 offset = 7;
    string sort_by = 8;
}

message GetBlogsBySliceReq {
    repeated string blog_ids = 1;
    repeated string owner_account_ids = 2;
    repeated string tags = 3;
    repeated string usernames = 4;
    int32 limit = 5;
    int32 offset = 6;
    bool is_draft = 7;
    bool is_archive = 8;    
}

message BlogReq {
    string blog_id = 1;
    string account_id = 2;
    string ip = 3;
    string client = 4;
    string username = 5;
    bool is_draft = 6;
    bool is_archive = 7;
}

message BlogResp {
    string message = 1;
    string error = 2;
}

message FeedReq {
    repeated string tags = 1;
    int32 limit = 2;
    int32 offset = 3;
}

service BlogService {
    // Metadata may contain the blog id, owner account id, title, first paragraph, 
    // tags, first image, publish time, author name, etc.
    rpc GetBlogsMetadata(FeedReq) returns (stream google.protobuf.Any); 

    // TODO: Remove the deprecated APIs
    rpc DraftBlog(DraftBlogRequest) returns (BlogResponse); // Migrated to DraftBlogV2
    rpc PublishBlog(PublishBlogReq) returns (PublishBlogResp); // By blog id
    rpc GetPublishedBlogById(BlogByIdReq) returns (BlogByIdRes); // One blog by blog id
    rpc GetDraftBlogById(BlogByIdReq) returns (BlogByIdRes); // One blog by blog id
    rpc ArchiveBlogById(ArchiveBlogReq) returns (ArchiveBlogResp); // One blog by blog id
    rpc GetPublishedBlogsByTagsName(GetBlogsByTagsNameReq) returns (GetBlogsByTagsNameRes);
    rpc GetDraftBlogsByAccId(BlogByIdReq) returns (GetDraftBlogsRes);
    rpc GetPublishedBlogsByAccID(BlogByIdReq) returns (GetPublishedBlogsRes);
    rpc GetLatest100Blogs(GetBlogsByTagsNameReq) returns (GetBlogsByTagsNameRes);
    rpc GetPublishedBlogByIdAndOwnerId(BlogByIdReq) returns (BlogByIdRes);

    rpc GetAllBlogsByBlogIds(GetBlogsByBlogIds) returns (GetBlogsRes) {};

    rpc CheckIfBlogsExist(BlogByIdReq) returns (BlogExistsRes);
    rpc DeleteABlogByBlogId(DeleteBlogReq) returns (DeleteBlogResp);

    // rpc DraftBlogV2(DraftBlogV2Req) returns (BlogV2Response);

    // Corrected APIS
    rpc GetDraftBlogByBlogId(BlogByIdReq) returns (BlogByIdRes);


  // --------------------------------------------------------------------- V2 APIs ---------------------------------------------------------------------
    rpc DraftBlogV2(stream google.protobuf.Any) returns (stream google.protobuf.Any);
    rpc BlogsOfFollowingAccounts(FollowingAccounts) returns (stream google.protobuf.Any);
    rpc GetBlogs(GetBlogsReq) returns (stream google.protobuf.Any);
    rpc GetBlog(BlogReq) returns (google.protobuf.Any); // By blog id
    rpc MoveBlogToDraftStatus(BlogReq) returns (BlogResp); // By from published status to draft status by blog id
    rpc GetBlogsBySlice(GetBlogsBySliceReq) returns (stream google.protobuf.Any);
    rpc GetFeedBlogs(FeedReq) returns (stream google.protobuf.Any);
}
