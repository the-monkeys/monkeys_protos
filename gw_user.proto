syntax = "proto3";

package auth_svc;

import "google/protobuf/timestamp.proto";




option go_package = "./apis/serviceconn/gateway_user/pb";

message UserProfileReq {
    string account_id = 1;
    string username = 2;
    string email = 3;
    bool is_private = 4;
    string ip = 5;
    string client = 6;
}

message UserProfileRes {
    string account_id = 1;
    string username = 2; 
    string first_name = 3;
    string last_name = 4;
    string date_of_birth = 5;
    int64 role_id = 6;
    string bio = 7;
    string avatar_url = 8; 
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10; 
    string address = 11;
    string contact_number = 12;
    string user_status = 13;
    string instagram = 14;
    string linkedin = 15;
    string twitter = 16;
    string github = 17;
    repeated string topics = 18;
}

message UserActivityReq {
    string user_id = 1;
    string user_name = 2;
    string email = 3;
    string ip = 4;
    string client = 5;
}

message UserActivityResp {
    repeated UserActivity response = 1;
}
message UserActivity {
    string event_type = 1;
    string service_type = 2;
    string timestamp = 3;
    string ip_address = 4;
    string description = 5;
}

// message Error {
//     int32 status = 1;
//     string error = 2;
//     string message = 3;
// }

message UpdateUserProfileReq {
    string username = 1;
    string first_name = 2;
    string last_name = 3;
    string date_of_birth = 4;
    string bio = 5;
    string address = 6;
    string contact_number = 7;
    string ip = 8;
    string client = 9;
    bool partial = 10;
    string instagram = 11;
    string linkedin = 12;
    string twitter = 13;
    string github = 14;
}

message UpdateUserProfileRes {
    string account_id = 1;
    string username = 2; 
    string first_name = 3;
    string last_name = 4;
    string date_of_birth = 5;
    string bio = 6;
    string address = 7;
    int64 contact_number = 8;
    string email = 9;
    int64  status = 10;
    string error = 11;
}

message DeleteUserProfileReq {
    string account_id = 1;
    string username = 2;
    string email    = 3;
    string client   = 4;
    string ip = 5;
}

message DeleteUserProfileRes {
    string success = 1;
    string error = 2;
    string status = 3;
}

message GetTopicsRequests {
}

message Topics {
    string topic = 1;
    string category = 2;
}

message GetTopicsResponse {
    repeated Topics topics = 1; 
}

message Category {
    repeated string Topics = 1;
} 

message GetAllCategoriesReq {
}

message GetAllCategoriesRes {
    map<string, Category> category = 1;
}

message UserDetailReq {
    string account_id = 1;
    string username = 2;
    string email = 3;
    string search_term = 4;
    int32 limit = 5;
    int32 offset = 6;
}

message UserDetailsResp {
    string account_id = 1;
    string username = 2; 
    string first_name = 3;
    string last_name = 4;
    string bio = 5;
    string avatar_url = 6;
    string location = 7;
    string error = 8;
}

message TopicActionReq {
    repeated string topic = 1;
    string username = 2;
    string ip = 3;
    string client = 4;
}

message TopicActionRes {
    int32 status = 1;
    string message = 2;
    string error = 3;
}

message CoAuthorAccessReq {
    string account_id = 1;
    string username = 2;
    string email = 3;
    string ip = 4;
    string client = 5;
    string blog_owner_username = 6;
    string blog_id = 7;
}

message CoAuthorAccessRes {
    string account_id = 1;
    string username = 2;
    string email = 3;
    string status = 4;
    string error = 5;
    string message = 6;
}

message BlogsByUserIdsReq{
    string username = 1;
    string type = 2;
    string account_id = 3;
}

message Blog {
    int64 id = 1;
    string username = 2;
    string account_id = 3;
    string blog_id = 4;
    string permission = 5;
    string status = 6;
}
message BlogsByUserNameRes{
    repeated Blog blogs = 1;
}

message CreateTopicsReq {
    repeated string topics = 1;
    string category = 2;
    string username = 3;
    string ip = 4;
    string client = 5;
}

message CreateTopicsRes {
    int32 status = 1;
    string message = 2;
    string error = 3;
}

message BookMarkReq {
    string blog_id = 1;
    string username = 2;
    string ip = 3;
    string client = 4;
}

message BookMarkRes {
    int32 status = 1;
    string message = 2;
    string error = 3;
    bool isLiked = 4;
    bool bookMarked = 5;
    repeated string blog_ids = 6;
}

message UserFollowReq {
    string username = 1;
    string follower_username = 2;
    string ip = 3;
    string client = 4;
}

message UserFollowRes {
    int32 status = 1;
    string message = 2;
    string error = 3;
    bool isFollowing = 4;
}

message User {
    string account_id = 1;
    string username = 2;
    string email = 3;
    string first_name = 4;
    string last_name = 5;
    string bio = 6;
    string avatar_url = 7;
}

message FollowerFollowingResp {
    repeated User users = 1;
    int32 limit = 2;
    int32 offset = 3;
}

message CountResp {
    int32 count = 1;
    string error = 2;
    int32 status = 3;
}

message FollowerFollowingCountsResp {
    int64 followers = 1;
    int64 following = 2;
    string error = 3;
    string message = 4;
    int32 status = 5;
}

service UserService {
    rpc GetUserActivities(UserActivityReq) returns (UserActivityResp) {}
    rpc GetUserProfile(UserProfileReq) returns (UserProfileRes) {}
    rpc UpdateUserProfile(UpdateUserProfileReq) returns (UpdateUserProfileRes) {}
    rpc DeleteUserAccount(DeleteUserProfileReq) returns (DeleteUserProfileRes) {}
    rpc GetAllTopics(GetTopicsRequests) returns (GetTopicsResponse) {}
    rpc GetAllCategories(GetAllCategoriesReq) returns (GetAllCategoriesRes) {}
    rpc GetUserDetails(UserDetailReq) returns (UserDetailsResp) {}
    rpc FollowTopics(TopicActionReq) returns (TopicActionRes) {}
    rpc UnFollowTopics(TopicActionReq) returns (TopicActionRes) {}
    rpc FollowUser(UserFollowReq) returns (UserFollowRes) {}
    rpc UnFollowUser(UserFollowReq) returns (UserFollowRes) {}
    rpc GetFollowers(UserDetailReq) returns (FollowerFollowingResp) {} // Get Users who follow me
    rpc GetFollowing(UserDetailReq) returns (FollowerFollowingResp) {} // Get Users I follow
    rpc GetIfIFollowedUser(UserFollowReq) returns (UserFollowRes) {}
    rpc GetFollowersFollowingCounts(UserDetailReq) returns (FollowerFollowingCountsResp) {}
    rpc SearchUser(stream UserDetailReq) returns (stream FollowerFollowingResp) {}
    // Bookmark blog
    rpc BookMarkBlog(BookMarkReq) returns (BookMarkRes) {}
    rpc GetBookMarks(BookMarkReq) returns (BookMarkRes) {}
    // Remove Bookmark
    rpc RemoveBookMark(BookMarkReq) returns (BookMarkRes) {}
    rpc LikeBlog(BookMarkReq) returns (BookMarkRes) {}
    rpc UnlikeBlog(BookMarkReq) returns (BookMarkRes) {}
    rpc GetIfBlogLiked(BookMarkReq) returns (BookMarkRes) {}
    rpc GetIfBlogBookMarked(BookMarkReq) returns (BookMarkRes) {}
    rpc GetBookMarkCounts(BookMarkReq) returns (CountResp) {}
    rpc GetLikeCounts(BookMarkReq) returns (CountResp) {}
    // Invite a co author
    rpc InviteCoAuthor(CoAuthorAccessReq) returns (CoAuthorAccessRes) {}

    // Accept co author invitation
    // Reject co author invitation
    // Revoke co author invitation access
    rpc RevokeCoAuthorAccess(CoAuthorAccessReq) returns (CoAuthorAccessRes) {}
    rpc GetBlogsByUserIds(BlogsByUserIdsReq) returns (BlogsByUserNameRes) {}
    rpc CreateNewTopics(CreateTopicsReq) returns (CreateTopicsRes) {}
}

